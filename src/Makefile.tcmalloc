#CXX=/disk1/ws/llvm-bolt/bin/clang++
CXX=clang++

ifeq ($(OS),Windows_NT)
	CFLAGS=-c -std=c++11 -Wall -Wextra -O3 -fomit-frame-pointer -fPIC -DNDEBUG -pedantic -march=native -fno-rtti
	LDFLAGS=-static-libgcc -static-libstdc++ -lpthread
else
	LDFLAGS=-lpthread
	ARCH := $(shell uname -m)

	ifeq ($(ARCH),x86_64)
		CFLAGS=-c -std=c++20 -Wall -Wextra -O3 -fomit-frame-pointer -fPIC -DNDEBUG -pedantic -march=native -fno-rtti
	else
		CFLAGS=-c -std=c++20 -Wall -Wextra -O3 -fPIC -DNDEBUG -pedantic -fno-rtti
	endif
endif	

IB_COMMON_SOURCES=Global.cpp \
        Event.cpp \
        api/libapi.cpp \
        entropy/EntropyUtils.cpp \
        entropy/HuffmanCommon.cpp \
        entropy/CMPredictor.cpp \
        entropy/TPAQPredictor.cpp \
        transform/AliasCodec.cpp \
        transform/BWT.cpp \
        transform/BWTS.cpp \
        transform/DivSufSort.cpp \
        transform/SBRT.cpp \
        transform/BWTBlockCodec.cpp \
        transform/LZCodec.cpp \
        transform/FSDCodec.cpp \
        transform/ROLZCodec.cpp \
        transform/RLT.cpp \
        transform/SRT.cpp \
        transform/TextCodec.cpp \
        transform/UTFCodec.cpp \
        transform/EXECodec.cpp \
        transform/ZRLT.cpp
LIB_COMMON_OBJECTS=$(LIB_COMMON_SOURCES:.cpp=.o)

LIB_COMP_SOURCES=bitstream/DebugOutputBitStream.cpp \
        bitstream/DefaultOutputBitStream.cpp \
        io/CompressedOutputStream.cpp \
        entropy/ANSRangeEncoder.cpp \
        entropy/BinaryEntropyEncoder.cpp \
        entropy/ExpGolombEncoder.cpp \
        entropy/FPAQEncoder.cpp \
        entropy/HuffmanEncoder.cpp \
        entropy/RangeEncoder.cpp \
        entropy/RiceGolombEncoder.cpp
LIB_COMP_OBJECTS=$(LIB_COMP_SOURCES:.cpp=.o)

LIB_COMP_SOURCES=bitstream/DebugOutputBitStream.cpp \
        bitstream/DefaultOutputBitStream.cpp \
        io/CompressedOutputStream.cpp \
        entropy/ANSRangeEncoder.cpp \
        entropy/BinaryEntropyEncoder.cpp \
        entropy/ExpGolombEncoder.cpp \
        entropy/FPAQEncoder.cpp \
        entropy/HuffmanEncoder.cpp \
        entropy/RangeEncoder.cpp \
        entropy/RiceGolombEncoder.cpp
LIB_COMP_OBJECTS=$(LIB_COMP_SOURCES:.cpp=.o)

LIB_DECOMP_SOURCES= bitstream/DebugInputBitStream.cpp \
        bitstream/DefaultInputBitStream.cpp \
        io/CompressedInputStream.cpp \
        entropy/ANSRangeDecoder.cpp \
        entropy/BinaryEntropyDecoder.cpp \
        entropy/ExpGolombDecoder.cpp \
        entropy/FPAQDecoder.cpp \
        entropy/HuffmanDecoder.cpp \
        entropy/RangeDecoder.cpp \
        entropy/RiceGolombDecoder.cpp
LIB_DECOMP_OBJECTS=$(LIB_DECOMP_SOURCES:.cpp=.o)

LIB_SOURCES=$(LIB_COMMON_SOURCES) $(LIB_COMP_SOURCES) $(LIB_DECOMP_SOURCES)

LIB_OBJECTS=$(LIB_COMMON_OBJECTS) $(LIB_COMP_OBJECTS) $(LIB_DECOMP_OBJECTS)

TEST_SOURCES=test/TestEntropyCodec.cpp \
        test/TestBWT.cpp \
        test/TestCompressedStream.cpp \
        test/TestDefaultBitStream.cpp \
        test/TestTransforms.cpp
TEST_OBJECTS=$(TEST_SOURCES:.cpp=.o)


LIB_OBJECTS=$(LIB_SOURCES:.cpp=.o)

TEST_SOURCES=test/TestEntropyCodec.cpp \
	test/TestBWT.cpp \
	test/TestDefaultBitStream.cpp \
	test/TestCompressedStream.cpp \
	test/TestTransforms.cpp 
TEST_OBJECTS=$(TEST_SOURCES:.cpp=.o)

APP_SOURCES=app/Kanzi.cpp \
	app/InfoPrinter.cpp \
	app/BlockCompressor.cpp \
	app/BlockDecompressor.cpp
APP_OBJECTS=$(APP_SOURCES:.cpp=.o)

SOURCES=$(LIB_SOURCES) $(APP_SOURCES)
OBJECTS=$(SOURCES:.cpp=.o)

ifeq ($(CXX),g++)
   LIB_TCMALLOC=/usr/local/lib/libtcmalloc_minimal.a
else ifeq ($(CXX),g++-9)
   LIB_TCMALLOC=/usr/local/lib/libtcmalloc_minimal.a
else ifeq ($(CXX),g++-10)
   LIB_TCMALLOC=/usr/local/lib/libtcmalloc_minimal.a
else ifeq ($(CXX),g++-11)
   LIB_TCMALLOC=/usr/local/lib/libtcmalloc_minimal.a
else
   LIB_TCMALLOC=/usr/local/lib/libtcmalloc_minimal.a
   #LIB_TCMALLOC=/disk1/ws/cpp/kanzi-cpp/src/librpmalloc.a
endif

RPTS=$(SOURCES:.cpp=.optrpt)
TESTS=testBWT testTransforms \
	testEntropyCodec testDefaultBitStream \
	testCompressedStream

APP=kanzi
	
STATIC_LIB_SUFFIX := .a
SHARED_LIB_SUFFIX := .so
PROG_SUFFIX       := 

# Compiling for Windows with MinGW?
ifeq ($(OS),Windows_NT)
    STATIC_LIB_SUFFIX := .lib
    SHARED_LIB_SUFFIX := .dll
    PROG_SUFFIX       := .exe
endif

STATIC_LIB := lib$(APP)$(STATIC_LIB_SUFFIX)
SHARED_LIB := lib$(APP)$(SHARED_LIB_SUFFIX)

all: $(STATIC_LIB) $(SHARED_LIB) $(APP) $(TESTS)

test: $(TESTS)

# Create static library
$(STATIC_LIB):$(LIB_OBJECTS)
	$(AR) cr ../lib/$@ $+

# Create shared library
$(SHARED_LIB):$(LIB_OBJECTS)
	$(CXX) -o ../lib/$@ $(LDFLAGS) -shared $+


testBWT: $(LIB_OBJECTS) test/TestBWT.o
	$(CXX) $^ -o ../bin/$@ $(LDFLAGS)

testTransforms: $(LIB_OBJECTS) test/TestTransforms.o
	$(CXX) $^ -o ../bin/$@ $(LDFLAGS)

testEntropyCodec: $(LIB_OBJECTS) test/TestEntropyCodec.o
	$(CXX) $^ -o ../bin/$@ $(LDFLAGS)

testDefaultBitStream: $(LIB_OBJECTS) test/TestDefaultBitStream.o
	$(CXX) $^ -o ../bin/$@ $(LDFLAGS)

testCompressedStream: $(LIB_OBJECTS) test/TestCompressedStream.o
	$(CXX) $^ -o ../bin/$@ $(LDFLAGS)

kanzi: $(OBJECTS) app/Kanzi.o
	$(CXX) $^ -o ../bin/$@ $(LIB_TCMALLOC) $(LDFLAGS)

clean: 
ifeq ($(OS),Windows_NT)
	del /S *.o *.obj ..\bin\$(APP)$(PROG_SUFFIX) ..\lib\$(STATIC_LIB) ..\lib\$(SHARED_LIB)
else
	rm -f ../bin/test*$(PROG_SUFFIX) $(OBJECTS) $(RPTS) $(TEST_OBJECTS) \
	../bin/$(APP)$(PROG_SUFFIX) ../lib/$(STATIC_LIB) ../lib/$(SHARED_LIB)
endif

.cpp.o:
	$(CXX) $(CFLAGS) $< -o $@
